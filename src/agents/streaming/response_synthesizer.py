# src/agents/synthesizer.py
from typing import List, Optional
import asyncio
import re
import json
import time
import traceback
import os
import httpx

from src.core.workflow_state import AgentState
from src.core.llm_factory import get_pydantic_ai_llm, MODEL_SYNTHESIZER, LLM_GROQ_LANGCHAIN, GROQ_API_KEY, MODEL_GROQ_WEB, OPENROUTER_API_KEY
from src.core.legal_models import DocumentSnippet, FinalResponse, LegalQuery, ProcessingConfig
from src.interfaces.external_search_client import LexMLDocumento, TavilySearchResult

# Adicionado: Import PydanticAI Agent e depend√™ncias espec√≠ficas
from pydantic_ai import Agent, ModelRetry, UnexpectedModelBehavior, capture_run_messages
from pydantic_ai.models.groq import GroqModel
from pydantic_ai.models.openai import OpenAIModel
# ‚úÖ CORRE√á√ÉO: Usar OpenAIProvider com configura√ß√£o manual para OpenRouter
from pydantic_ai.providers.openai import OpenAIProvider
from pydantic import BaseModel, Field

# ‚úÖ NOVA IMPORTA√á√ÉO: Sistema h√≠brido corrigido real
from src.agents.streaming.hybrid_legal_processor import process_legal_query_hybrid_corrected

# Modelo simplificado e robusta para o synthesizer
class SimpleFinalResponse(BaseModel):
    overall_summary: str = Field(
        ..., 
        description="Resposta jur√≠dica completa e detalhada em texto simples",
        min_length=100,
        max_length=15000  # Alinhado com FinalResponse para comportar respostas do sistema h√≠brido de 4 partes
    )
    disclaimer: str = Field(
        default="Esta resposta √© fornecida apenas para fins informativos e n√£o constitui aconselhamento jur√≠dico profissional. Para quest√µes espec√≠ficas, consulte um advogado especializado.",
        description="Aviso legal sobre limita√ß√µes da resposta"
    )

# System Prompt otimizado para LLMs e sa√≠da limpa
SYNTHESIZER_SYSTEM_PROMPT = (
    "Voc√™ √© um advogado especialista em direito brasileiro. "
    "Forne√ßa respostas jur√≠dicas precisas, claras e estruturadas.\n\n"
    
    "REGRAS CR√çTICAS PARA FORMATA√á√ÉO:\n"
    "- Use APENAS texto simples em portugu√™s brasileiro\n"
    "- N√ÉO use s√≠mbolos especiais, emojis, ou caracteres Unicode\n"
    "- N√ÉO inclua quebras de linha desnecess√°rias\n"
    "- Use linguagem jur√≠dica precisa mas acess√≠vel\n"
    "- Evite aspas duplas dentro do conte√∫do\n\n"
    
    "Estruture sua resposta jur√≠dica com:\n"
    "1. Conceito e base legal\n"
    "2. Procedimento pr√°tico espec√≠fico\n"
    "3. Considera√ß√µes e alertas importantes\n\n"
    
    "Use 300-800 palavras. Cite artigos de lei quando relevante.\n"
    "Seja objetivo e direto na orienta√ß√£o jur√≠dica."
)

# ‚úÖ WRAPPER CUSTOMIZADO OPENROUTER (comprovadamente funciona)
async def openrouter_direct_call(prompt: str) -> str:
    """Chamada direta para OpenRouter usando HTTP"""
    if not OPENROUTER_API_KEY:
        raise Exception("OPENROUTER_API_KEY n√£o configurada")
    
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "model": MODEL_SYNTHESIZER,
        "messages": [
            {"role": "system", "content": SYNTHESIZER_SYSTEM_PROMPT},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 1000,
        "temperature": 0.0
    }
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=30.0
        )
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            
            # Limpeza b√°sica
            content = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', content)
            content = re.sub(r'\s+', ' ', content).strip()
            
            return content
        else:
            raise Exception(f"OpenRouter HTTP {response.status_code}: {response.text}")

def create_robust_openrouter_agent():
    """Cria agent PydanticAI usando OpenRouter com configura√ß√£o correta"""
    try:
        print("üîß Configurando PydanticAI Agent com OpenRouter...")
        
        # Verificar se temos API key do OpenRouter
        if not OPENROUTER_API_KEY:
            print("‚ùå OPENROUTER_API_KEY n√£o encontrada")
            return None
        
        print(f"üîë OpenRouter API key configurada: ***{OPENROUTER_API_KEY[-4:]}")
        print(f"üéØ Modelo OpenRouter: {MODEL_SYNTHESIZER}")
        
        # ‚úÖ CONFIGURA√á√ÉO SIMPLES QUE FUNCIONA (baseada nos testes)
        openrouter_provider = OpenAIProvider(
            api_key=OPENROUTER_API_KEY,
            base_url="https://openrouter.ai/api/v1"
        )
        
        openrouter_model = OpenAIModel(
            model_name=MODEL_SYNTHESIZER,
            provider=openrouter_provider
        )
        
        print("‚úÖ Modelo OpenRouter criado")
        
        # ‚úÖ CONFIGURA√á√ÉO SIMPLIFICADA que comprovadamente funciona
        agent = Agent(
            model=openrouter_model,
            output_type=SimpleFinalResponse,
            instructions=SYNTHESIZER_SYSTEM_PROMPT,
            # ‚úÖ Settings mais simples baseados nos testes de sucesso
            model_settings={
                "temperature": 0.0,
                "max_tokens": 1000,  # Reduzido de 2000
                "top_p": 0.9        # Simplificado
            },
            retries=1  # Reduzido de 2 para evitar loops
        )
        
        print("‚úÖ Agent PydanticAI + OpenRouter criado com sucesso")
        return agent
        
    except Exception as e:
        print(f"‚ùå Erro ao criar agent OpenRouter: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return None

def create_robust_groq_agent():
    """Cria agent PydanticAI usando Groq que j√° funciona perfeitamente"""
    try:
        print("üîß Configurando PydanticAI Agent com Groq...")
        
        # Verificar se temos API key do Groq
        if not GROQ_API_KEY:
            print("‚ùå GROQ_API_KEY n√£o encontrada")
            return None
        
        print(f"üîë Groq API key configurada: ***{GROQ_API_KEY[-4:]}")
        print(f"üéØ Modelo Groq: {MODEL_GROQ_WEB}")
        
        # Usar modelo Groq diretamente (evita problemas do OpenRouter)
        groq_model = GroqModel(MODEL_GROQ_WEB)
        
        print("‚úÖ Modelo Groq criado")
        
        # Configura√ß√µes espec√≠ficas para evitar caracteres problem√°ticos
        agent = Agent(
            model=groq_model,
            output_type=SimpleFinalResponse,
            instructions=SYNTHESIZER_SYSTEM_PROMPT,  # Usar instructions ao inv√©s de system_prompt
            model_settings={
                "temperature": 0.0,     # M√°ximo determinismo
                "max_tokens": 2000,     # Limite controlado  
                "top_p": 0.8,           # Foco nas respostas mais prov√°veis
                "frequency_penalty": 0.3,  # Reduz repeti√ß√µes
                "presence_penalty": 0.2    # Evita padr√µes problem√°ticos
            },
            retries=2  # Retry autom√°tico do PydanticAI
        )
        
        print("‚úÖ Agent PydanticAI + Groq criado com sucesso")
        return agent
        
    except Exception as e:
        print(f"‚ùå Erro ao criar agent Groq: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return None

# Tool function para retry inteligente
def validate_legal_response(ctx, response: SimpleFinalResponse) -> SimpleFinalResponse:
    """Valida e limpa resposta jur√≠dica"""
    
    # Verificar se a resposta tem conte√∫do m√≠nimo
    if len(response.overall_summary) < 100:
        raise ModelRetry(
            f"Resposta muito curta ({len(response.overall_summary)} chars). "
            "Forne√ßa uma an√°lise jur√≠dica mais detalhada com pelo menos 300 palavras "
            "incluindo base legal, procedimento pr√°tico e considera√ß√µes importantes."
        )
    
    # Verificar se menciona aspectos jur√≠dicos
    legal_keywords = [
        'c√≥digo civil', 'lei', 'artigo', 'jurisprud√™ncia', 'direito', 
        'sociedade', 's√≥cio', 'contrato', 'judicial', 'advogado'
    ]
    
    content_lower = response.overall_summary.lower()
    if not any(keyword in content_lower for keyword in legal_keywords):
        raise ModelRetry(
            "A resposta deve abordar aspectos jur√≠dicos espec√≠ficos. "
            "Inclua base legal, artigos de lei aplic√°veis e procedimentos jur√≠dicos adequados."
        )
    
    # Limpar caracteres problem√°ticos se existirem
    cleaned_summary = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', response.overall_summary)
    cleaned_summary = re.sub(r'[^\x20-\x7E\u00C0-\u017F]', '', cleaned_summary)
    cleaned_summary = re.sub(r'\s+', ' ', cleaned_summary).strip()
    
    if cleaned_summary != response.overall_summary:
        print("üßπ Limpeza de caracteres aplicada")
        response.overall_summary = cleaned_summary
    
    return response

# Instanciar agents - TENTAR OPENROUTER PRIMEIRO, DEPOIS GROQ
print("üîß Configurando PydanticAI Agent...")

# ‚úÖ PRIORIDADE: Tentar OpenRouter primeiro
synthesizer_agent = create_robust_openrouter_agent()

# ‚úÖ FALLBACK: Se OpenRouter falhar, usar Groq  
if synthesizer_agent is None:
    print("üîÑ OpenRouter n√£o dispon√≠vel. Tentando Groq...")
    synthesizer_agent = create_robust_groq_agent()

if synthesizer_agent:
    # Adicionar valida√ß√£o como output validator
    @synthesizer_agent.output_validator
    def validate_output(ctx, response: SimpleFinalResponse) -> SimpleFinalResponse:
        return validate_legal_response(ctx, response)
    
    print("‚úÖ PydanticAI Agent + Validator inicializado com sucesso")
else:
    print("‚ùå ERRO: N√£o foi poss√≠vel inicializar PydanticAI Agent")

def clean_text_for_json(text: str) -> str:
    """Limpa texto para evitar problemas de JSON"""
    if not text:
        return ""
    
    # Remove caracteres de controle
    text = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', text)
    
    # Remove quebras de linha excessivas
    text = re.sub(r'\n+', ' ', text)
    text = re.sub(r'\r+', ' ', text)
    
    # Remove espa√ßos excessivos
    text = re.sub(r'\s+', ' ', text)
    
    return text.strip()

def format_crag_docs_for_prompt(docs: Optional[List[DocumentSnippet]]) -> str:
    """Formata documentos CRAG para o prompt"""
    if not docs:
        return "Nenhum documento dispon√≠vel."
    
    formatted_snippets = []
    for i, doc in enumerate(docs[:10]):
        source_id = getattr(doc, 'source_id', f'Documento {i+1}')
        text_content = getattr(doc, 'text', 'Conte√∫do n√£o dispon√≠vel.')
        
        # Limpar texto
        text_content = clean_text_for_json(text_content)
        if len(text_content) > 200:
            text_content = text_content[:200] + "..."
            
        formatted_snippets.append(f"[{i+1}] {source_id}: {text_content}")
    
    return "\n".join(formatted_snippets)

def format_tavily_results_for_prompt(results: Optional[List[TavilySearchResult]]) -> str:
    """Formata resultados Tavily para o prompt"""
    if not results:
        return "Nenhuma busca web realizada."
    
    formatted_results = []
    for i, res in enumerate(results[:3]):
        title = getattr(res, 'title', 'Sem t√≠tulo')
        content = getattr(res, 'content', 'Conte√∫do indispon√≠vel')
        
        # Limpar texto
        content = clean_text_for_json(content)
        if len(content) > 100:
            content = content[:100] + "..."
            
        formatted_results.append(f"[Web {i+1}] {title}: {content}")
    
    return "\n".join(formatted_results)

def format_lexml_results_for_prompt(results: Optional[List[LexMLDocumento]]) -> str:
    """Formata resultados LexML para o prompt"""
    if not results:
        return "Nenhuma jurisprud√™ncia encontrada."
    
    formatted_results = []
    for i, res in enumerate(results[:3]):
        urn = getattr(res, 'urn', f'LexML {i+1}')
        ementa = getattr(res, 'ementa', 'Sem ementa')
        
        # Limpar texto
        if ementa:
            ementa = clean_text_for_json(ementa)
            if len(ementa) > 150:
                ementa = ementa[:150] + "..."
        
        formatted_results.append(f"[Juris {i+1}] {urn}: {ementa}")
    
    return "\n".join(formatted_results)

async def synthesize_with_hybrid_corrected_approach(query_text: str, formatted_crag: str, formatted_tavily: str, formatted_lexml: str) -> SimpleFinalResponse:
    """
    S√≠ntese usando abordagem h√≠brida CORRETA atrav√©s do sistema real PydanticAI:
    - Groq: Buscar informa√ß√µes usando tools (sistema real)
    - OpenRouter: RAG, an√°lise e s√≠ntese do conte√∫do (sistema real)
    """
    
    print("ü§ñ === S√çNTESE H√çBRIDA CORRETA (SISTEMA REAL) ===")
    print("üîß Groq: Tools e buscas estruturadas (PydanticAI real)")
    print("üß† OpenRouter: RAG, an√°lise e s√≠ntese (PydanticAI real)")
    
    # Input ultra-limpo e estruturado
    cleaned_query = clean_text_for_json(query_text)
    
    try:
        # Criar LegalQuery para o sistema h√≠brido real
        legal_query = LegalQuery(text=cleaned_query)
        
        # Configura√ß√£o de processamento otimizada
        config = ProcessingConfig(
            max_documents_per_source=10,
            search_timeout_seconds=30,
            enable_parallel_search=True,
            max_retries=2,
            retry_backoff_factor=1.5,
            min_confidence_threshold=0.3,
            human_review_threshold=0.8,
            temperature=0.1,
            max_tokens=3000,
            enable_human_review=False,  # Desabilitar para integra√ß√£o r√°pida
            enable_web_search=True,
            enable_jurisprudence_search=True,
            enable_guardrails=True
        )
        
        print(f"üöÄ Executando sistema h√≠brido real para: {cleaned_query[:100]}...")
        start_time = time.time()
        
        # Executar o sistema h√≠brido corrigido REAL
        final_response = await process_legal_query_hybrid_corrected(
            query=legal_query,
            config=config,
            user_id="synthesizer_integration"
        )
        
        elapsed_time = time.time() - start_time
        print(f"‚è±Ô∏è Sistema h√≠brido real conclu√≠do: {elapsed_time:.2f}s")
        print(f"üìè Resposta gerada: {len(final_response.overall_summary)} chars")
        print(f"üéØ Confian√ßa geral: {final_response.overall_confidence:.2%}")
        
        # Converter para SimpleFinalResponse compat√≠vel
        simplified_response = SimpleFinalResponse(
            overall_summary=final_response.overall_summary,
            disclaimer=final_response.disclaimer
        )
        
        print("‚úÖ Sistema h√≠brido real conclu√≠do com sucesso!")
        return simplified_response
        
    except Exception as hybrid_error:
        print(f"‚ùå Erro no sistema h√≠brido real: {str(hybrid_error)}")
        print(f"üîÑ Fallback para simula√ß√£o h√≠brida...")
        
        # Fallback para simula√ß√£o (mant√©m funcionalidade)
        return await synthesize_with_hybrid_simulation_fallback(
            cleaned_query, formatted_crag, formatted_tavily, formatted_lexml
        )


async def synthesize_with_hybrid_corrected_approach_streaming(query_text: str, formatted_crag: str, formatted_tavily: str, formatted_lexml: str):
    """
    S√≠ntese usando abordagem h√≠brida CORRETA com streaming atrav√©s do sistema real PydanticAI:
    - Groq: Buscar informa√ß√µes usando tools (sistema real)
    - OpenRouter: RAG, an√°lise e s√≠ntese do conte√∫do (sistema real) COM STREAMING
    """
    
    print("ü§ñ === S√çNTESE H√çBRIDA CORRETA COM STREAMING (SISTEMA REAL) ===")
    print("üîß Groq: Tools e buscas estruturadas (PydanticAI real)")
    print("üß† OpenRouter: RAG, an√°lise e s√≠ntese (PydanticAI real) COM STREAMING")
    
    # Input ultra-limpo e estruturado
    cleaned_query = clean_text_for_json(query_text)
    
    try:
        # Criar LegalQuery para o sistema h√≠brido real
        legal_query = LegalQuery(text=cleaned_query)
        
        # Configura√ß√£o de processamento otimizada
        config = ProcessingConfig(
            max_documents_per_source=10,
            search_timeout_seconds=30,
            enable_parallel_search=True,
            max_retries=2,
            retry_backoff_factor=1.5,
            min_confidence_threshold=0.3,
            human_review_threshold=0.8,
            temperature=0.1,
            max_tokens=3000,
            enable_human_review=False,  # Desabilitar para integra√ß√£o r√°pida
            enable_web_search=True,
            enable_jurisprudence_search=True,
            enable_guardrails=True
        )
        
        print(f"üöÄ Executando sistema h√≠brido real com streaming para: {cleaned_query[:100]}...")
        start_time = time.time()
        
        # Executar o sistema h√≠brido corrigido REAL (sem streaming espec√≠fico)
        final_response = await process_legal_query_hybrid_corrected(
            query=legal_query,
            config=config,
            user_id="synthesizer_integration"
        )
        
        # Simular streaming com a resposta final
        if final_response and hasattr(final_response, 'overall_summary'):
            response_text = final_response.overall_summary
            words = response_text.split()
            current_text = ""
            
            for i, word in enumerate(words):
                current_text += word + " "
                
                # Yield chunks a cada 3 palavras para streaming
                if (i + 1) % 3 == 0 or i == len(words) - 1:
                    yield ("streaming", current_text.strip())
                    await asyncio.sleep(0.1)  # Pausa para streaming
        
        elapsed_time = time.time() - start_time
        print(f"‚è±Ô∏è Sistema h√≠brido real com streaming conclu√≠do: {elapsed_time:.2f}s")
        
        if final_response:
            print(f"üìè Resposta gerada: {len(final_response.overall_summary)} chars")
            print(f"üéØ Confian√ßa geral: {final_response.overall_confidence:.2%}")
            
            # Converter para SimpleFinalResponse compat√≠vel
            simplified_response = SimpleFinalResponse(
                overall_summary=final_response.overall_summary,
                disclaimer=final_response.disclaimer
            )
            
            print("‚úÖ Sistema h√≠brido real com streaming conclu√≠do com sucesso!")
            yield ("final", simplified_response)
        else:
            yield ("error", "Sistema h√≠brido n√£o retornou resposta final")
        
    except Exception as hybrid_error:
        print(f"‚ùå Erro no sistema h√≠brido real com streaming: {str(hybrid_error)}")
        print(f"üîÑ Fallback para simula√ß√£o h√≠brida com streaming...")
        
        # Fallback para simula√ß√£o com streaming
        async for step_type, content in synthesize_with_hybrid_simulation_fallback_streaming(
            cleaned_query, formatted_crag, formatted_tavily, formatted_lexml
        ):
            yield step_type, content


async def synthesize_with_hybrid_simulation_fallback_streaming(cleaned_query: str, formatted_crag: str, formatted_tavily: str, formatted_lexml: str):
    """
    Fallback para simula√ß√£o h√≠brida com streaming quando o sistema real n√£o funciona.
    """
    print("üîÑ === FALLBACK: SIMULA√á√ÉO H√çBRIDA COM STREAMING ===")
    
    yield ("progress", "üîß Simulando busca Groq...")
    
    # === SIMULA√á√ÉO GROQ: Decis√£o de busca ===
    search_decision = {
        "needs_vectordb": bool(formatted_crag and len(formatted_crag) > 50),
        "needs_lexml": bool(formatted_lexml and len(formatted_lexml) > 50),
        "needs_web": bool(formatted_tavily and len(formatted_tavily) > 50),
        "confidence": 0.85,
        "reasoning": "Consulta jur√≠dica complexa requer m√∫ltiplas fontes especializadas"
    }
    
    yield ("progress", "üß† Executando an√°lise OpenRouter...")
    
    # === SIMULA√á√ÉO GROQ: Resultados das buscas estruturadas ===
    groq_search_summary = f"""
=== RELAT√ìRIO DE BUSCAS EXECUTADAS PELO GROQ ===

VECTORDB SEARCH: {"EXECUTADA" if search_decision['needs_vectordb'] else "DISPENSADA"}
{formatted_crag[:800] if formatted_crag else "Nenhum documento encontrado"}

LEXML SEARCH: {"EXECUTADA" if search_decision['needs_lexml'] else "DISPENSADA"}
{formatted_lexml[:600] if formatted_lexml else "Nenhuma legisla√ß√£o encontrada"}

WEB SEARCH: {"EXECUTADA" if search_decision['needs_web'] else "DISPENSADA"}
{formatted_tavily[:400] if formatted_tavily else "Nenhuma informa√ß√£o web encontrada"}

CONFIAN√áA GERAL DAS BUSCAS: {search_decision['confidence']:.1%}
STATUS: Dados coletados e estruturados com sucesso
"""

    # === OPENROUTER: An√°lise jur√≠dica (RAG) ===
    rag_analysis_prompt = f"""
CONSULTA JUR√çDICA ORIGINAL: {cleaned_query}

=== DADOS COLETADOS PELO SISTEMA DE BUSCA ===
{groq_search_summary}

Como especialista em direito brasileiro, analise todos os dados acima e produza uma an√°lise jur√≠dica completa:

ESTRUTURA OBRIGAT√ìRIA:
1. RESUMO EXECUTIVO da consulta
2. QUEST√ïES JUR√çDICAS identificadas
3. LEGISLA√á√ÉO APLIC√ÅVEL (com artigos espec√≠ficos)
4. JURISPRUD√äNCIA RELEVANTE (precedentes)
5. AN√ÅLISE DOUTRIN√ÅRIA
6. RISCOS E OPORTUNIDADES
7. RECOMENDA√á√ïES PR√ÅTICAS
8. CONCLUS√ÉO FUNDAMENTADA

Mantenha rigor t√©cnico-jur√≠dico, fundamenta√ß√£o s√≥lida e linguagem clara.
"""

    yield ("progress", "‚úçÔ∏è Gerando s√≠ntese final...")

    # Tentar OpenRouter direto para an√°lise RAG
    try:
        if OPENROUTER_API_KEY:
            rag_analysis = await openrouter_direct_call(rag_analysis_prompt)
        else:
            rag_analysis = await LLM_GROQ_LANGCHAIN.ainvoke(rag_analysis_prompt)
            rag_analysis = rag_analysis.content if hasattr(rag_analysis, 'content') else str(rag_analysis)
    except Exception:
        rag_analysis = f"An√°lise b√°sica da consulta '{cleaned_query}' com base nos documentos dispon√≠veis."
    
    # === OPENROUTER: S√≠ntese final COM STREAMING ===
    synthesis_prompt = f"""
CONSULTA ORIGINAL: {cleaned_query}

AN√ÅLISE JUR√çDICA COMPLETA:
{rag_analysis[:2000]}

Com base na an√°lise jur√≠dica acima, forne√ßa uma RESPOSTA FINAL estruturada e clara:

1. RESPOSTA DIRETA √† consulta original
2. FUNDAMENTOS LEGAIS aplic√°veis
3. JURISPRUD√äNCIA relevante
4. ORIENTA√á√ïES PR√ÅTICAS espec√≠ficas
5. DISCLAIMERS apropriados

REQUISITOS:
- Linguagem acess√≠vel mas tecnicamente precisa
- 400-800 palavras
- Citar artigos de lei quando aplic√°vel
- Incluir precedentes relevantes
- Orienta√ß√µes pr√°ticas claras

S√çNTESE FINAL:
"""

    try:
        if OPENROUTER_API_KEY:
            final_synthesis = await openrouter_direct_call(synthesis_prompt)
            final_synthesis = clean_text_for_json(final_synthesis)
            
            if len(final_synthesis) > 2800:
                final_synthesis = final_synthesis[:2800] + "..."
            
            # Simular streaming
            words = final_synthesis.split()
            current_text = ""
            
            for i, word in enumerate(words):
                current_text += word + " "
                
                # Yield chunks a cada 3 palavras
                if (i + 1) % 3 == 0 or i == len(words) - 1:
                    yield ("streaming", current_text.strip())
                    await asyncio.sleep(0.1)  # Pausa para streaming
            
            response = SimpleFinalResponse(
                overall_summary=final_synthesis,
                disclaimer="Esta resposta foi gerada por sistema de IA integrado e est√° suscet√≠vel a erro. Para qualquer conclus√£o e tomada de descis√£o procure um advogado credenciado e qualificado."
            )
            
            yield ("final", response)
            
        else:
            final_response = await LLM_GROQ_LANGCHAIN.ainvoke(synthesis_prompt)
            final_content = final_response.content if hasattr(final_response, 'content') else str(final_response)
            final_content = clean_text_for_json(final_content)
            
            # Simular streaming
            words = final_content.split()
            current_text = ""
            
            for i, word in enumerate(words):
                current_text += word + " "
                
                # Yield chunks a cada 3 palavras
                if (i + 1) % 3 == 0 or i == len(words) - 1:
                    yield ("streaming", current_text.strip())
                    await asyncio.sleep(0.1)  # Pausa para streaming
            
            response = SimpleFinalResponse(
                overall_summary=final_content,
                disclaimer="Esta resposta foi gerada automaticamente com streaming e deve ser revisada por profissional qualificado."
            )
            
            yield ("final", response)
            
    except Exception as e:
        yield ("error", f"Erro na s√≠ntese com streaming: {str(e)}")


async def synthesize_with_hybrid_simulation_fallback(cleaned_query: str, formatted_crag: str, formatted_tavily: str, formatted_lexml: str) -> SimpleFinalResponse:
    """
    Fallback para simula√ß√£o h√≠brida quando o sistema real n√£o funciona.
    """
    print("üîÑ === FALLBACK: SIMULA√á√ÉO H√çBRIDA ===")
    
    # === SIMULA√á√ÉO GROQ: Decis√£o de busca ===
    search_decision = {
        "needs_vectordb": bool(formatted_crag and len(formatted_crag) > 50),
        "needs_lexml": bool(formatted_lexml and len(formatted_lexml) > 50),
        "needs_web": bool(formatted_tavily and len(formatted_tavily) > 50),
        "confidence": 0.85,
        "reasoning": "Consulta jur√≠dica complexa requer m√∫ltiplas fontes especializadas"
    }
    
    # === SIMULA√á√ÉO GROQ: Resultados das buscas estruturadas ===
    groq_search_summary = f"""
=== RELAT√ìRIO DE BUSCAS EXECUTADAS PELO GROQ ===

VECTORDB SEARCH: {"EXECUTADA" if search_decision['needs_vectordb'] else "DISPENSADA"}
{formatted_crag[:800] if formatted_crag else "Nenhum documento encontrado"}

LEXML SEARCH: {"EXECUTADA" if search_decision['needs_lexml'] else "DISPENSADA"}
{formatted_lexml[:600] if formatted_lexml else "Nenhuma legisla√ß√£o encontrada"}

WEB SEARCH: {"EXECUTADA" if search_decision['needs_web'] else "DISPENSADA"}
{formatted_tavily[:400] if formatted_tavily else "Nenhuma informa√ß√£o web encontrada"}

CONFIAN√áA GERAL DAS BUSCAS: {search_decision['confidence']:.1%}
STATUS: Dados coletados e estruturados com sucesso
"""

    # === OPENROUTER: An√°lise jur√≠dica (RAG) ===
    rag_analysis_prompt = f"""
CONSULTA JUR√çDICA ORIGINAL: {cleaned_query}

=== DADOS COLETADOS PELO SISTEMA DE BUSCA ===
{groq_search_summary}

Como especialista em direito brasileiro, analise todos os dados acima e produza uma an√°lise jur√≠dica completa:

ESTRUTURA OBRIGAT√ìRIA:
1. RESUMO EXECUTIVO da consulta
2. QUEST√ïES JUR√çDICAS identificadas
3. LEGISLA√á√ÉO APLIC√ÅVEL (com artigos espec√≠ficos)
4. JURISPRUD√äNCIA RELEVANTE (precedentes)
5. AN√ÅLISE DOUTRIN√ÅRIA
6. RISCOS E OPORTUNIDADES
7. RECOMENDA√á√ïES PR√ÅTICAS
8. CONCLUS√ÉO FUNDAMENTADA

Mantenha rigor t√©cnico-jur√≠dico, fundamenta√ß√£o s√≥lida e linguagem clara.
"""

    # Tentar OpenRouter direto para an√°lise RAG
    try:
        if OPENROUTER_API_KEY:
            rag_analysis = await openrouter_direct_call(rag_analysis_prompt)
        else:
            rag_analysis = await LLM_GROQ_LANGCHAIN.ainvoke(rag_analysis_prompt)
            rag_analysis = rag_analysis.content if hasattr(rag_analysis, 'content') else str(rag_analysis)
    except Exception:
        rag_analysis = f"An√°lise b√°sica da consulta '{cleaned_query}' com base nos documentos dispon√≠veis."
    
    # === OPENROUTER: S√≠ntese final ===
    synthesis_prompt = f"""
CONSULTA ORIGINAL: {cleaned_query}

AN√ÅLISE JUR√çDICA COMPLETA:
{rag_analysis[:2000]}

Com base na an√°lise jur√≠dica acima, forne√ßa uma RESPOSTA FINAL estruturada e clara:

1. RESPOSTA DIRETA √† consulta original
2. FUNDAMENTOS LEGAIS aplic√°veis
3. JURISPRUD√äNCIA relevante
4. ORIENTA√á√ïES PR√ÅTICAS espec√≠ficas
5. DISCLAIMERS apropriados

REQUISITOS:
- Linguagem acess√≠vel mas tecnicamente precisa
- 400-800 palavras
- Citar artigos de lei quando aplic√°vel
- Incluir precedentes relevantes
- Orienta√ß√µes pr√°ticas claras

S√çNTESE FINAL:
"""

    try:
        if OPENROUTER_API_KEY:
            final_synthesis = await openrouter_direct_call(synthesis_prompt)
            final_synthesis = clean_text_for_json(final_synthesis)
            
            if len(final_synthesis) > 2800:
                final_synthesis = final_synthesis[:2800] + "..."
            
            return SimpleFinalResponse(
                overall_summary=final_synthesis,
                disclaimer="Esta resposta foi gerada por sistema de IA integrado e est√° suscet√≠vel a erro. Para qualquer conclus√£o e tomada de descis√£o procure um advogado credenciado e qualificado."
            )
        else:
            final_response = await LLM_GROQ_LANGCHAIN.ainvoke(synthesis_prompt)
            final_content = final_response.content if hasattr(final_response, 'content') else str(final_response)
            final_content = clean_text_for_json(final_content)
            
            return SimpleFinalResponse(
                overall_summary=final_content,
                disclaimer="Esta resposta foi gerada automaticamente e deve ser revisada por profissional qualificado."
            )
            
    except Exception:
        # S√≠ntese b√°sica estruturada
        basic_synthesis = f"""
Com base na consulta jur√≠dica sobre '{cleaned_query}', h√° importantes aspectos do direito societ√°rio brasileiro a considerar.

A legisla√ß√£o brasileira, especialmente o C√≥digo Civil (Lei 10.406/2002), estabelece mecanismos espec√≠ficos para quest√µes envolvendo s√≥cios de sociedades empres√°rias. Os principais caminhos legais incluem: (1) direito de recesso ou retirada volunt√°ria do s√≥cio em situa√ß√µes previstas em lei; (2) exclus√£o de s√≥cio por justa causa, respeitando procedimentos legais adequados; (3) dissolu√ß√£o parcial da sociedade com apura√ß√£o de haveres.

O procedimento espec√≠fico varia conforme o tipo societ√°rio (sociedade limitada, an√¥nima, etc.) e as circunst√¢ncias do caso. Para sociedades limitadas, aplicam-se primariamente os artigos 1.077 e seguintes do C√≥digo Civil. √â fundamental observar o contrato social, respeitar direitos adquiridos e seguir procedimentos legais apropriados.

A legisla√ß√£o protege s√≥cios minorit√°rios contra abusos, mas tamb√©m reconhece situa√ß√µes em que a retirada ou exclus√£o pode ser necess√°ria para preservar a sociedade. Quest√µes como apura√ß√£o de haveres, justa causa e procedimentos judiciais ou extrajudiciais devem ser cuidadosamente avaliadas.

Recomenda-se consultar advogado especializado em direito empresarial para an√°lise espec√≠fica do caso, elabora√ß√£o de estrat√©gia adequada e orienta√ß√£o sobre procedimentos legais aplic√°veis √† situa√ß√£o particular da sociedade.
"""
        
        return SimpleFinalResponse(
            overall_summary=basic_synthesis,
            disclaimer="Esta √© uma resposta b√°sica gerada automaticamente devido a erro t√©cnico. Para orienta√ß√£o jur√≠dica espec√≠fica, consulte um advogado especializado."
        )

async def synthesize_response(state: AgentState) -> dict:
    """Gera a resposta final usando synthesizer robusto PydanticAI (OpenRouter ou Groq) - MODO COLETA APENAS"""
    print("---NODE: SYNTHESIZE RESPONSE (PydanticAI + Fallback)---")
    
    query_object = state.get("query")
    if not query_object:
        print("  ERRO: Objeto LegalQuery n√£o encontrado no estado!")
        error_response = FinalResponse(
            query_id="unknown",
            overall_summary="Erro interno: Query original n√£o encontrada. O sistema n√£o conseguiu processar adequadamente a consulta jur√≠dica solicitada. Este erro indica um problema t√©cnico que deve ser reportado ao suporte para investiga√ß√£o e corre√ß√£o.",
            disclaimer="Este √© um erro t√©cnico do sistema. Para orienta√ß√£o jur√≠dica, consulte um advogado especializado."
        )
        return {"error": "Query n√£o encontrada", "final_response": error_response.model_dump()}
        
    query_text = query_object.text
    retrieved_crag_docs = state.get("retrieved_docs")
    tavily_web_results = state.get("tavily_results")
    lexml_juris_results = state.get("lexml_results")

    # LOGS DE DEBUG DO ESTADO
    print("üîç === DEBUG ESTADO ===")
    print(f"üìù Query: {query_text}")
    print(f"üìö CRAG docs: {len(retrieved_crag_docs) if retrieved_crag_docs else 0}")
    print(f"üåê Tavily results: {len(tavily_web_results) if tavily_web_results else 0}")
    print(f"‚öñÔ∏è LexML results: {len(lexml_juris_results) if lexml_juris_results else 0}")

    # Formata√ß√£o otimizada
    formatted_crag = format_crag_docs_for_prompt(retrieved_crag_docs) if retrieved_crag_docs else "Nenhum documento CRAG"
    formatted_tavily = format_tavily_results_for_prompt(tavily_web_results) if tavily_web_results else "Nenhuma busca web"
    formatted_lexml = format_lexml_results_for_prompt(lexml_juris_results) if lexml_juris_results else "Nenhuma jurisprud√™ncia"

    print(f"üìè Tamanho formatado - CRAG: {len(formatted_crag)}, Tavily: {len(formatted_tavily)}, LexML: {len(formatted_lexml)}")

    # MODO S√çNTESE COMPLETA SEMPRE ATIVO - CORRE√á√ÉO CR√çTICA
    should_synthesize = state.get("should_synthesize", True)
    if not should_synthesize:
        print("  ‚ö†Ô∏è AVISO: should_synthesize=False detectado, mas executando s√≠ntese completa...")
        print("  üîß CORRE√á√ÉO: For√ßando s√≠ntese completa para evitar modo coleta apenas")
    
    print("  ‚úÖ MODO S√çNTESE COMPLETA - Processando dados CRAG + LexML + Web")

    print("  Iniciando s√≠ntese h√≠brida correta...")
    try:
        # Usar synthesizer h√≠brido corrigido (Groq tools + OpenRouter RAG)
        llm_response = await synthesize_with_hybrid_corrected_approach(
            query_text, formatted_crag, formatted_tavily, formatted_lexml
        )
        
        # Construir resposta final
        final_response = FinalResponse(
            query_id=query_object.id,
            overall_summary=llm_response.overall_summary,
            disclaimer=llm_response.disclaimer 
        )
        
        print("  ‚úÖ S√≠ntese conclu√≠da com sucesso!")
        print(f"üìè Resposta final: {len(final_response.overall_summary)} chars")
        return {"final_response": final_response.model_dump()}

    except Exception as e:
        print(f"  ‚ùå Erro cr√≠tico na s√≠ntese: {str(e)}")
        print(f"  Traceback: {traceback.format_exc()}")
        
        # Resposta de emerg√™ncia
        emergency_response = FinalResponse(
            query_id=query_object.id if query_object else "unknown",
            overall_summary="O sistema encontrou dificuldades t√©cnicas ao processar sua consulta jur√≠dica. Este erro pode estar relacionado √† complexidade da consulta ou a problemas tempor√°rios de conectividade com os servi√ßos de IA. Tente reformular sua pergunta de forma mais espec√≠fica ou tente novamente em alguns minutos. Para orienta√ß√£o jur√≠dica imediata, consulte um advogado especializado.",
            disclaimer="Resposta de erro t√©cnico. Este sistema utiliza IA para assist√™ncia jur√≠dica, mas n√£o substitui consulta profissional com advogado especializado."
        )
        return {"error": str(e), "final_response": emergency_response.model_dump()}


async def synthesize_response_streaming(state: AgentState):
    """Gera a resposta final usando synthesizer robusto PydanticAI com STREAMING"""
    print("---NODE: SYNTHESIZE RESPONSE WITH STREAMING (PydanticAI + Fallback)---")
    
    query_object = state.get("query")
    if not query_object:
        print("  ERRO: Objeto LegalQuery n√£o encontrado no estado!")
        error_response = FinalResponse(
            query_id="unknown",
            overall_summary="Erro interno: Query original n√£o encontrada. O sistema n√£o conseguiu processar adequadamente a consulta jur√≠dica solicitada. Este erro indica um problema t√©cnico que deve ser reportado ao suporte para investiga√ß√£o e corre√ß√£o.",
            disclaimer="Este √© um erro t√©cnico do sistema. Para orienta√ß√£o jur√≠dica, consulte um advogado especializado."
        )
        yield ("error", "Query n√£o encontrada")
        return
        
    query_text = query_object.text
    retrieved_crag_docs = state.get("retrieved_docs")
    tavily_web_results = state.get("tavily_results")
    lexml_juris_results = state.get("lexml_results")

    # LOGS DE DEBUG DO ESTADO
    print("üîç === DEBUG ESTADO ===")
    print(f"üìù Query: {query_text}")
    print(f"üìö CRAG docs: {len(retrieved_crag_docs) if retrieved_crag_docs else 0}")
    print(f"üåê Tavily results: {len(tavily_web_results) if tavily_web_results else 0}")
    print(f"‚öñÔ∏è LexML results: {len(lexml_juris_results) if lexml_juris_results else 0}")

    # Formata√ß√£o otimizada
    formatted_crag = format_crag_docs_for_prompt(retrieved_crag_docs) if retrieved_crag_docs else "Nenhum documento CRAG"
    formatted_tavily = format_tavily_results_for_prompt(tavily_web_results) if tavily_web_results else "Nenhuma busca web"
    formatted_lexml = format_lexml_results_for_prompt(lexml_juris_results) if lexml_juris_results else "Nenhuma jurisprud√™ncia"

    print(f"üìè Tamanho formatado - CRAG: {len(formatted_crag)}, Tavily: {len(formatted_tavily)}, LexML: {len(formatted_lexml)}")

    print("  Iniciando s√≠ntese h√≠brida correta com streaming...")
    try:
        # Usar synthesizer h√≠brido corrigido com streaming
        final_response = None
        async for step_type, content in synthesize_with_hybrid_corrected_approach_streaming(
            query_text, formatted_crag, formatted_tavily, formatted_lexml
        ):
            if step_type == "progress":
                yield ("progress", content)
            elif step_type == "streaming":
                yield ("streaming", content)
            elif step_type == "final":
                # Converter SimpleFinalResponse para FinalResponse
                simple_response = content
                final_response = FinalResponse(
                    query_id=query_object.id,
                    overall_summary=simple_response.overall_summary,
                    disclaimer=simple_response.disclaimer 
                )
                break
            elif step_type == "error":
                yield ("error", content)
                return
        
        if final_response:
            print("  ‚úÖ S√≠ntese com streaming conclu√≠da com sucesso!")
            print(f"üìè Resposta final: {len(final_response.overall_summary)} chars")
            yield ("final", final_response.model_dump())
        else:
            yield ("error", "S√≠ntese com streaming n√£o retornou resposta")

    except Exception as e:
        print(f"  ‚ùå Erro cr√≠tico na s√≠ntese com streaming: {str(e)}")
        print(f"  Traceback: {traceback.format_exc()}")
        
        # Resposta de emerg√™ncia
        emergency_response = FinalResponse(
            query_id=query_object.id if query_object else "unknown",
            overall_summary="O sistema encontrou dificuldades t√©cnicas ao processar sua consulta jur√≠dica com streaming. Este erro pode estar relacionado √† complexidade da consulta ou a problemas tempor√°rios de conectividade com os servi√ßos de IA. Tente reformular sua pergunta de forma mais espec√≠fica ou tente novamente em alguns minutos. Para orienta√ß√£o jur√≠dica imediata, consulte um advogado especializado.",
            disclaimer="Resposta de erro t√©cnico com streaming. Este sistema utiliza IA para assist√™ncia jur√≠dica, mas n√£o substitui consulta profissional com advogado especializado."
        )
        yield ("error", str(e)) 