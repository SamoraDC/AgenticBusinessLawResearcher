"""
Teste r√°pido de integra√ß√£o do synthesizer corrigido.
"""

import asyncio
import sys
import os

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

async def quick_test():
    """Teste r√°pido do sistema corrigido."""
    print("üîß Teste r√°pido de integra√ß√£o...")
    
    try:
        # Testar imports do sistema h√≠brido corrigido
        from src.agents.streaming.hybrid_legal_processor import synthesize_with_openrouter_streaming
        from src.core.legal_models import LegalQuery, Priority, ValidationLevel
        print("‚úÖ Imports OK")
        
        # Testar cria√ß√£o de objetos b√°sicos
        query = LegalQuery(
            text="retirada de s√≥cio minorit√°rio",
            priority=Priority.MEDIUM,
            validation_level=ValidationLevel.MODERATE,
            use_hybrid_streaming=True
        )
        print("‚úÖ Modelos OK")
        
        # Teste b√°sico de funcionamento (sem execu√ß√£o real)
        print("‚úÖ Sistema corrigido carregado com sucesso!")
        
        # Verificar se as fun√ß√µes problem√°ticas foram corrigidas
        print("üîç Verificando corre√ß√µes...")
        
        # Ler o c√≥digo corrigido e verificar se as palavras problem√°ticas foram removidas
        with open('src/agents/streaming/hybrid_legal_processor.py', 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Verificar se os prompts problem√°ticos foram removidos
        problematic_phrases = [
            'CONCEITO PRINCIPAL',
            'FUNDAMENTA√á√ÉO LEGAL', 
            'APLICA√á√ÉO PR√ÅTICA',
            'EXATAMENTE 400-500 palavras',
            'OBRIGAT√ìRIO: Esta se√ß√£o deve conter NO M√çNIMO'
        ]
        
        issues_found = []
        for phrase in problematic_phrases:
            if phrase in content:
                issues_found.append(phrase)
        
        if issues_found:
            print(f"‚ö†Ô∏è Ainda h√° frases problem√°ticas: {issues_found}")
            return False
        else:
            print("‚úÖ Frases problem√°ticas removidas!")
        
        print("üéâ Sistema corrigido validado!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(quick_test())
    if success:
        print("‚úÖ TESTE R√ÅPIDO: PASSOU")
    else:
        print("‚ùå TESTE R√ÅPIDO: FALHOU") 